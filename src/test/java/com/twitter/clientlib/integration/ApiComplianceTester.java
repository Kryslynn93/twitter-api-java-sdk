/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.integration;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.*;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;



@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ApiComplianceTester extends ApiTester {

  String complianceJobByID = "1537616980307456001"; //1382081613278814209
  String complianceJobByIDNotFound = "998837616980307456099"; //1382081613278814209

  @BeforeAll
  public void init() {
    initApiInstanceBearer();
  }

  public CreateComplianceJobResponse createCompliance() throws ApiException {
    CreateComplianceJobRequest req = new CreateComplianceJobRequest();
    req.setType(CreateComplianceJobRequest.TypeEnum.TWEETS);
    return apiInstance.compliance().createBatchComplianceJob(req)
        .execute();
  }

  @Test
  public void getBatchComplianceJobJobTest() throws ApiException {
    String id = createCompliance().getData().getId();
    Get2ComplianceJobsIdResponse result = apiInstance.compliance().getBatchComplianceJob(id).execute();
    checkErrors(false, result.getErrors());
    checkComplianceJobData(result.getData());
  }

  @Test
  public void getBatchComplianceJobErrorTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      Get2ComplianceJobsIdResponse result = apiInstance.compliance().getBatchComplianceJob(complianceJobByIDNotFound).execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + complianceJobByIDNotFound + "] does not match ^[0-9]{1,19}$",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

// ComplianceJobStatus should have "expired value
//  @Test
//  public void listBatchComplianceJobsTest() throws ApiException {
//    Get2ComplianceJobsResponse result = apiInstance.compliance().listBatchComplianceJobs(
//        CreateComplianceJobRequest.TypeEnum.TWEETS.getValue()).execute();
//    checkErrors(false, result.getErrors());
//    assertNotNull(result.getData());
//    checkComplianceJobData(result.getData().get(0));
//  }

  @Test
  public void listBatchComplianceJobsErrorTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.compliance().listBatchComplianceJobs("DUMMY").execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `type` query parameter value [" + "DUMMY" + "] is not one of [tweets,users]",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void createBatchComplianceJobTest() throws ApiException {
    CreateComplianceJobResponse result = createCompliance();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertNotNull(result.getData().getId());
    assertNotNull(result.getData().getType());
  }
}
