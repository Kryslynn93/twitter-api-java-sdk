/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.api;

import com.twitter.clientlib.TwitterCredentialsOAuth2;
import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.Error;
import com.twitter.clientlib.model.GenericMultipleUsersLookupResponse;
import com.twitter.clientlib.model.ListLookupMultipleUsersLookupResponse;
import com.twitter.clientlib.model.MultiUserLookupResponse;
import com.twitter.clientlib.model.Problem;
import java.util.Set;
import com.twitter.clientlib.model.SingleUserLookupResponse;
import com.twitter.clientlib.model.UsersBlockingMutationResponse;
import com.twitter.clientlib.model.UsersFollowingCreateResponse;
import com.twitter.clientlib.model.UsersFollowingDeleteResponse;
import com.twitter.clientlib.model.UsersFollowingLookupResponse;
import com.twitter.clientlib.model.UsersIdBlockRequest;
import com.twitter.clientlib.model.UsersIdFollowRequest;
import com.twitter.clientlib.model.UsersIdMuteRequest;
import com.twitter.clientlib.model.UsersMutingMutationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.InputStream;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final TwitterApi apiInstance = new TwitterApi();
    // TODO set credentials
    
    /**
     * User lookup me
     *
     * This endpoint returns information about the requesting user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMyUserTest() throws ApiException {
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = apiInstance.users().findMyUser(expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * User lookup by ID
     *
     * This endpoint returns information about a user. Specify user by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String id = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = apiInstance.users().findUserById(id, expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * User lookup by username
     *
     * This endpoint returns information about a user. Specify user by username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserByUsernameTest() throws ApiException {
        String username = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = apiInstance.users().findUserByUsername(username, expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * User lookup by IDs
     *
     * This endpoint returns information about users. Specify users by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUsersByIdTest() throws ApiException {
        List<String> ids = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = apiInstance.users().findUsersById(ids, expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * User lookup by usernames
     *
     * This endpoint returns information about users. Specify users by their username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUsersByUsernameTest() throws ApiException {
        List<String> usernames = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = apiInstance.users().findUsersByUsername(usernames, expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * Returns user objects that follow a List by the provided List ID
     *
     * Returns a list of users that follow a List by the provided List ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGetFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                ListLookupMultipleUsersLookupResponse response = apiInstance.users().listGetFollowers(id, maxResults, paginationToken, expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * Returns user objects that are members of a List by the provided List ID
     *
     * Returns a list of users that are members of a List by the provided List ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGetMembersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                ListLookupMultipleUsersLookupResponse response = apiInstance.users().listGetMembers(id, maxResults, paginationToken, expansions, tweetFields, userFields);
        // TODO: test validations
    }


    /**
     * Returns user objects that have liked the provided Tweet ID
     *
     * Returns a list of users that have liked the provided Tweet ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetsIdLikingUsersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = apiInstance.users().tweetsIdLikingUsers(id, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Returns user objects that have retweeted the provided Tweet ID
     *
     * Returns a list of users that have retweeted the provided Tweet ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetsIdRetweetingUsersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = apiInstance.users().tweetsIdRetweetingUsers(id, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Block User by User ID
     *
     * Causes the user (in the path) to block the target user. The user (in the path) must match the user context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBlockTest() throws ApiException {
        UsersIdBlockRequest usersIdBlockRequest = null;
        String id = null;
                UsersBlockingMutationResponse response = apiInstance.users().usersIdBlock(usersIdBlockRequest, id);
        // TODO: test validations
    }


    /**
     * Returns user objects that are blocked by provided user ID
     *
     * Returns a list of users that are blocked by the provided user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBlockingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = apiInstance.users().usersIdBlocking(id, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Follow User
     *
     * Causes the user(in the path) to follow, or “request to follow” for protected users, the target user. The user(in the path) must match the user context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdFollowTest() throws ApiException {
        UsersIdFollowRequest usersIdFollowRequest = null;
        String id = null;
                UsersFollowingCreateResponse response = apiInstance.users().usersIdFollow(usersIdFollowRequest, id);
        // TODO: test validations
    }


    /**
     * Returns user objects that follow the provided user ID
     *
     * Returns a list of users that follow the provided user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = apiInstance.users().usersIdFollowers(id, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Following by User ID
     *
     * Returns a list of users that are being followed by the provided user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdFollowingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                UsersFollowingLookupResponse response = apiInstance.users().usersIdFollowing(id, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Mute User by User ID
     *
     * Causes the user (in the path) to mute the target user. The user (in the path) must match the user context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdMuteTest() throws ApiException {
        UsersIdMuteRequest usersIdMuteRequest = null;
        String id = null;
                UsersMutingMutationResponse response = apiInstance.users().usersIdMute(usersIdMuteRequest, id);
        // TODO: test validations
    }


    /**
     * Returns user objects that are muted by the provided user ID
     *
     * Returns a list of users that are muted by the provided user ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdMutingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = apiInstance.users().usersIdMuting(id, maxResults, paginationToken);
        // TODO: test validations
    }


    /**
     * Unblock User by User ID
     *
     * Causes the source user to unblock the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnblockTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersBlockingMutationResponse response = apiInstance.users().usersIdUnblock(sourceUserId, targetUserId);
        // TODO: test validations
    }


    /**
     * Unfollow User
     *
     * Causes the source user to unfollow the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnfollowTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersFollowingDeleteResponse response = apiInstance.users().usersIdUnfollow(sourceUserId, targetUserId);
        // TODO: test validations
    }


    /**
     * Unmute User by User ID
     *
     * Causes the source user to unmute the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnmuteTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersMutingMutationResponse response = apiInstance.users().usersIdUnmute(sourceUserId, targetUserId);
        // TODO: test validations
    }

}
